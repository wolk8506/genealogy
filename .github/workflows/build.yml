name: Build & Release Electron App

on:
  # по пушу тега v<version>
  push:
    tags:
      - "v*"

jobs:
  # ──────────────────────────────────────────────────
  build-mac:
    name: Build macOS .dmg
    runs-on: macos-latest
    outputs:
      dmg-path: ${{ steps.out-dmg.outputs.path }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Build React
        run: npm run build:react

      - name: Build DMG
        run: npm run dist:mac

      - name: Find built .dmg
        id: out-dmg
        run: |
          FILE=$(ls dist_electron/*.dmg)
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist_electron/**

  # ──────────────────────────────────────────────────
  build-win:
    name: Build Windows installer
    runs-on: windows-latest
    outputs:
      exe-path: ${{ steps.out-exe.outputs.path }}
      yml-path: ${{ steps.out-yml.outputs.path }}
      blockmap-path: ${{ steps.out-block.outputs.path }}
      stub-zip: ${{ steps.out-stub.outputs.path }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Build React
        run: npm run build:react

      - name: Build Windows
        run: npm run dist:win

      - name: Find full installer (.exe)
        id: out-exe
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF -replace 'refs/tags/v',''
          $file = Get-ChildItem dist_electron -Filter "*$tag.exe"
          Write-Output "path=$($file.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Find latest.yml
        id: out-yml
        shell: pwsh
        run: |
          $file = Join-Path $PWD 'dist_electron\latest.yml'
          Write-Output "path=$file" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Find blockmap
        id: out-block
        shell: pwsh
        run: |
          $file = Get-ChildItem dist_electron -Filter '*.blockmap'
          Write-Output "path=$($file.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Zip nsis-web stub & deltas
        id: out-stub
        shell: pwsh
        run: |
          Compress-Archive -LiteralPath 'dist_electron\nsis-web\*' -DestinationPath 'dist_electron\stub.zip'
          $zip = Join-Path $PWD 'dist_electron\stub.zip'
          Write-Output "path=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload windows-build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist_electron/**

  # ──────────────────────────────────────────────────
  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    outputs:
      appimg-path: ${{ steps.out-appimg.outputs.path }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Build React
        run: npm run build:react

      - name: Build AppImage
        run: npm run dist:linux

      - name: Find AppImage
        id: out-appimg
        run: |
          FILE=$(ls dist_electron/*.AppImage)
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload linux-build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist_electron/**

  # ──────────────────────────────────────────────────
  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [build-mac, build-win, build-linux]
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: version
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: Download macOS build
        uses: actions/download-artifact@v3
        with:
          name: macos-build
          path: ./artifacts/macos

      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: windows-build
          path: ./artifacts/windows

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: linux-build
          path: ./artifacts/linux

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION }}"
          draft: false
          prerelease: false

      - name: Upload macOS .dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos/dist_electron/*.dmg
          asset_name: "Genealogy-${{ env.VERSION }}.dmg"
          asset_content_type: application/octet-stream

      - name: Upload Windows full installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/dist_electron/"Genealogy Setup ${{ env.VERSION }}.exe"
          asset_name: "Genealogy Setup ${{ env.VERSION }}.exe"
          asset_content_type: application/octet-stream

      - name: Upload Windows latest.yml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/dist_electron/latest.yml
          asset_name: latest.yml
          asset_content_type: application/x-yaml

      - name: Upload Windows blockmap
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/dist_electron/*.blockmap
          asset_name: "Genealogy Setup ${{ env.VERSION }}.exe.blockmap"
          asset_content_type: application/octet-stream

      - name: Upload Windows web-stub & deltas
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/dist_electron/stub.zip
          asset_name: "nsis-web-${{ env.VERSION }}.zip"
          asset_content_type: application/zip

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux/dist_electron/*.AppImage
          asset_name: "Genealogy-${{ env.VERSION }}.AppImage"
          asset_content_type: application/octet-stream
